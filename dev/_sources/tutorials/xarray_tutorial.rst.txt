.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_tutorials_xarray_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_xarray_tutorial.py:


xarray with MetPy Tutorial
==========================

`xarray <http://xarray.pydata.org/>`_ is a powerful Python package that provides N-dimensional
labeled arrays and datasets following the Common Data Model. While the process of integrating
xarray features into MetPy is ongoing, this tutorial demonstrates how xarray can be used
within the current version of MetPy. MetPy's integration primarily works through accessors
which allow simplified projection handling and coordinate identification. Unit and calculation
support is currently available in a limited fashion, but should be improved in future
versions.


.. code-block:: default


    import cartopy.crs as ccrs
    import cartopy.feature as cfeature
    import matplotlib.pyplot as plt
    import xarray as xr

    # Any import of metpy will activate the accessors
    import metpy.calc as mpcalc
    from metpy.testing import get_test_data
    from metpy.units import units








Getting Data
------------

While xarray can handle a wide variety of n-dimensional data (essentially anything that can
be stored in a netCDF file), a common use case is working with model output. Such model
data can be obtained from a THREDDS Data Server using the siphon package, but for this
tutorial, we will use an example subset of GFS data from Hurrican Irma (September 5th,
2017).


.. code-block:: default


    # Open the netCDF file as a xarray Dataset
    data = xr.open_dataset(get_test_data('irma_gfs_example.nc', False))

    # View a summary of the Dataset
    print(data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:                              (isobaric1: 21, isobaric3: 31, latitude: 81, longitude: 131, time1: 9)
    Coordinates:
      * time1                                (time1) datetime64[ns] 2017-09-05T12:00:00 ... 2017-09-06T12:00:00
        reftime                              datetime64[ns] ...
      * latitude                             (latitude) float32 50.0 49.5 ... 10.0
      * isobaric3                            (isobaric3) float64 100.0 ... 1e+05
      * isobaric1                            (isobaric1) float64 1e+04 ... 1e+05
      * longitude                            (longitude) float32 250.0 ... 315.0
    Data variables:
        Vertical_velocity_pressure_isobaric  (time1, isobaric1, latitude, longitude) float32 ...
        Relative_humidity_isobaric           (time1, isobaric3, latitude, longitude) float32 ...
        Temperature_isobaric                 (time1, isobaric3, latitude, longitude) float32 ...
        u-component_of_wind_isobaric         (time1, isobaric3, latitude, longitude) float32 ...
        v-component_of_wind_isobaric         (time1, isobaric3, latitude, longitude) float32 ...
        Geopotential_height_isobaric         (time1, isobaric3, latitude, longitude) float32 ...
        LatLon_361X720-0p25S-180p00E         int32 ...
    Attributes:
        Originating_or_generating_Center:                                        ...
        Originating_or_generating_Subcenter:                                     ...
        GRIB_table_version:                                                      ...
        Type_of_generating_process:                                              ...
        Analysis_or_forecast_generating_process_identifier_defined_by_originating...
        Conventions:                                                             ...
        history:                                                                 ...
        featureType:                                                             ...
        History:                                                                 ...
        geospatial_lat_min:                                                      ...
        geospatial_lat_max:                                                      ...
        geospatial_lon_min:                                                      ...
        geospatial_lon_max:                                                      ...




Preparing Data
--------------

To make use of the data within MetPy, we need to parse the dataset for projection
information following the CF conventions. For this, we use the
``data.metpy.parse_cf()`` method, which will return a new, parsed ``DataArray`` or
``Dataset``.

Additionally, we rename our data variables for easier reference.


.. code-block:: default


    # To parse the full dataset, we can call parse_cf without an argument, and assign the returned
    # Dataset.
    data = data.metpy.parse_cf()

    # If we instead want just a single variable, we can pass that variable name to parse_cf and
    # it will return just that data variable as a DataArray.
    data_var = data.metpy.parse_cf('Temperature_isobaric')

    # If we want only a subset of variables, we can pass a list of variable names as well.
    data_subset = data.metpy.parse_cf(['u-component_of_wind_isobaric',
                                       'v-component_of_wind_isobaric'])

    # To rename variables, supply a dictionary between old and new names to the rename method
    data = data.rename({
        'Vertical_velocity_pressure_isobaric': 'omega',
        'Relative_humidity_isobaric': 'relative_humidity',
        'Temperature_isobaric': 'temperature',
        'u-component_of_wind_isobaric': 'u',
        'v-component_of_wind_isobaric': 'v',
        'Geopotential_height_isobaric': 'height'
    })








Units
-----

MetPy's DataArray accessor has a ``unit_array`` property to obtain a ``pint.Quantity`` array
of just the data from the DataArray (metadata is removed) and a ``convert_units`` method to
convert the the data from one unit to another (keeping it as a DataArray). For now, we'll
just use ``convert_units`` to convert our temperature to ``degC``.


.. code-block:: default


    data['temperature'].metpy.convert_units('degC')






.. only:: builder_html

    .. raw:: html

        <pre>&lt;xarray.DataArray &#x27;temperature&#x27; (time1: 9, isobaric3: 31, latitude: 81, longitude: 131)&gt;
        array([[[[-15.149994 , -15.149994 , -15.25     , ..., -14.949982 ,
                  -14.949982 , -14.850006 ],
                 [-15.25     , -15.25     , -15.350006 , ..., -14.949982 ,
                  -14.949982 , -14.949982 ],
                 [-15.350006 , -15.350006 , -15.350006 , ..., -15.049988 ,
                  -15.049988 , -15.049988 ],
                 ...,
                 [-12.350006 , -12.350006 , -12.350006 , ..., -15.149994 ,
                  -15.049988 , -14.949982 ],
                 [-12.149994 , -12.149994 , -12.149994 , ..., -15.049988 ,
                  -15.049988 , -14.949982 ],
                 [-11.949982 , -11.949982 , -11.949982 , ..., -15.049988 ,
                  -14.949982 , -14.850006 ]],

                [[-16.649994 , -16.649994 , -16.649994 , ..., -17.549988 ,
                  -17.549988 , -17.649994 ],
                 [-16.75     , -16.75     , -16.850006 , ..., -17.649994 ,
                  -17.649994 , -17.649994 ],
                 [-16.949982 , -16.949982 , -16.949982 , ..., -17.75     ,
                  -17.75     , -17.75     ],
                 ...,
                 [-14.049988 , -14.049988 , -14.049988 , ..., -12.049988 ,
                  -11.75     , -11.549988 ],
                 [-13.949982 , -13.949982 , -13.949982 , ..., -12.049988 ,
                  -11.75     , -11.549988 ],
                 [-13.75     , -13.850006 , -13.850006 , ..., -12.049988 ,
                  -11.75     , -11.549988 ]],

                [[-21.75     , -21.75     , -21.75     , ..., -22.649994 ,
                  -22.649994 , -22.649994 ],
                 [-21.949997 , -21.84999  , -21.84999  , ..., -22.75     ,
                  -22.75     , -22.75     ],
                 [-22.049988 , -22.049988 , -22.049988 , ..., -22.84999  ,
                  -22.84999  , -22.949997 ],
                 ...,
                 [-22.149994 , -22.149994 , -22.149994 , ..., -18.84999  ,
                  -18.949997 , -19.149994 ],
                 [-22.049988 , -22.049988 , -22.049988 , ..., -18.34999  ,
                  -18.449997 , -18.649994 ],
                 [-21.949997 , -21.949997 , -21.949997 , ..., -17.84999  ,
                  -18.049988 , -18.149994 ]],

                ...,

                [[ 14.25     ,  13.75     ,  13.149994 , ...,  12.550018 ,
                   11.450012 ,  11.050018 ],
                 [ 13.75     ,  13.75     ,  13.649994 , ...,  12.350006 ,
                   11.950012 ,  11.75     ],
                 [ 13.649994 ,  13.450012 ,  13.649994 , ...,  12.149994 ,
                   12.050018 ,  12.149994 ],
                 ...,
                 [ 22.149994 ,  22.149994 ,  22.149994 , ...,  22.550018 ,
                   22.649994 ,  22.75     ],
                 [ 22.050018 ,  22.050018 ,  21.950012 , ...,  22.550018 ,
                   22.149994 ,  22.350006 ],
                 [ 21.950012 ,  21.75     ,  22.149994 , ...,  22.550018 ,
                   22.450012 ,  22.050018 ]],

                [[ 15.649994 ,  15.149994 ,  14.649994 , ...,  11.950012 ,
                   11.850006 ,  11.75     ],
                 [ 15.149994 ,  15.149994 ,  15.050018 , ...,  11.950012 ,
                   11.649994 ,  11.450012 ],
                 [ 15.050018 ,  14.850006 ,  15.050018 , ...,  11.850006 ,
                   11.75     ,  11.649994 ],
                 ...,
                 [ 24.149994 ,  24.25     ,  24.149994 , ...,  24.649994 ,
                   24.649994 ,  24.850006 ],
                 [ 23.950012 ,  23.950012 ,  23.850006 , ...,  24.649994 ,
                   24.25     ,  24.450012 ],
                 [ 23.850006 ,  23.649994 ,  23.75     , ...,  24.649994 ,
                   24.25     ,  24.050018 ]],

                [[ 17.050018 ,  16.550018 ,  16.050018 , ...,  13.450012 ,
                   13.450012 ,  13.550018 ],
                 [ 16.550018 ,  16.550018 ,  16.450012 , ...,  13.350006 ,
                   13.050018 ,  12.950012 ],
                 [ 16.450012 ,  16.25     ,  16.450012 , ...,  13.050018 ,
                   12.850006 ,  12.850006 ],
                 ...,
                 [ 26.350006 ,  26.350006 ,  26.25     , ...,  26.75     ,
                   26.850006 ,  26.950012 ],
                 [ 26.050018 ,  26.050018 ,  25.950012 , ...,  26.75     ,
                   26.350006 ,  26.550018 ],
                 [ 26.050018 ,  25.75     ,  25.649994 , ...,  26.75     ,
                   26.350006 ,  26.149994 ]]],


               [[[-14.650024 , -14.650024 , -14.650024 , ..., -13.550018 ,
                  -13.550018 , -13.550018 ],
                 [-14.650024 , -14.650024 , -14.650024 , ..., -13.650024 ,
                  -13.650024 , -13.650024 ],
                 [-14.7500305, -14.7500305, -14.650024 , ..., -13.650024 ,
                  -13.650024 , -13.650024 ],
                 ...,
                 [-13.7500305, -13.650024 , -13.650024 , ..., -13.550018 ,
                  -13.650024 , -13.850006 ],
                 [-13.650024 , -13.550018 , -13.550018 , ..., -13.350006 ,
                  -13.550018 , -13.650024 ],
                 [-13.550018 , -13.450012 , -13.450012 , ..., -13.150024 ,
                  -13.350006 , -13.450012 ]],

                [[-16.850006 , -16.850006 , -16.850006 , ..., -16.050018 ,
                  -16.050018 , -16.050018 ],
                 [-17.050018 , -17.050018 , -17.050018 , ..., -16.150024 ,
                  -16.150024 , -16.150024 ],
                 [-17.150024 , -17.150024 , -17.150024 , ..., -16.25003  ,
                  -16.25003  , -16.25003  ],
                 ...,
                 [-14.850006 , -14.950012 , -14.950012 , ..., -12.2500305,
                  -11.950012 , -11.7500305],
                 [-14.650024 , -14.7500305, -14.850006 , ..., -12.150024 ,
                  -11.850006 , -11.650024 ],
                 [-14.450012 , -14.550018 , -14.650024 , ..., -12.050018 ,
                  -11.7500305, -11.550018 ]],

                [[-22.150024 , -22.150024 , -22.150024 , ..., -22.250015 ,
                  -22.250015 , -22.250015 ],
                 [-22.350021 , -22.350021 , -22.350021 , ..., -22.350021 ,
                  -22.350021 , -22.350021 ],
                 [-22.550018 , -22.450012 , -22.450012 , ..., -22.450012 ,
                  -22.450012 , -22.450012 ],
                 ...,
                 [-23.550018 , -23.650024 , -23.650024 , ..., -17.250015 ,
                  -17.150024 , -16.950012 ],
                 [-23.450012 , -23.450012 , -23.550018 , ..., -16.950012 ,
                  -16.75003  , -16.650024 ],
                 [-23.250015 , -23.350021 , -23.350021 , ..., -16.650024 ,
                  -16.550018 , -16.350006 ]],

                ...,

                [[ 15.850006 ,  15.450012 ,  15.050018 , ...,  12.149994 ,
                   12.25     ,  12.050018 ],
                 [ 15.050018 ,  14.75     ,  14.649994 , ...,  12.25     ,
                   12.25     ,  12.25     ],
                 [ 15.149994 ,  14.950012 ,  14.950012 , ...,  12.149994 ,
                   11.950012 ,  11.75     ],
                 ...,
                 [ 22.149994 ,  22.149994 ,  22.149994 , ...,  22.850006 ,
                   22.75     ,  22.850006 ],
                 [ 21.950012 ,  21.850006 ,  21.950012 , ...,  22.550018 ,
                   22.350006 ,  22.450012 ],
                 [ 21.850006 ,  21.75     ,  22.350006 , ...,  22.649994 ,
                   22.450012 ,  22.25     ]],

                [[ 17.269836 ,  16.869843 ,  16.469818 , ...,  12.269836 ,
                   12.16983  ,  12.16983  ],
                 [ 16.469818 ,  16.16983  ,  16.069824 , ...,  12.66983  ,
                   12.469818 ,  12.269836 ],
                 [ 16.569824 ,  16.369843 ,  16.369843 , ...,  12.869843 ,
                   13.069824 ,  13.069824 ],
                 ...,
                 [ 24.16983  ,  24.069824 ,  24.069824 , ...,  25.069824 ,
                   24.969818 ,  25.069824 ],
                 [ 23.869843 ,  23.769836 ,  23.869843 , ...,  24.569824 ,
                   24.369843 ,  24.569824 ],
                 [ 23.769836 ,  23.66983  ,  23.869843 , ...,  24.66983  ,
                   24.369843 ,  24.269836 ]],

                [[ 18.66983  ,  18.269836 ,  17.869843 , ...,  13.469818 ,
                   13.66983  ,  13.769836 ],
                 [ 17.869843 ,  17.569824 ,  17.469818 , ...,  13.469818 ,
                   13.369843 ,  13.16983  ],
                 [ 17.969818 ,  17.769836 ,  17.769836 , ...,  13.269836 ,
                   13.069824 ,  12.869843 ],
                 ...,
                 [ 26.269836 ,  26.16983  ,  26.16983  , ...,  27.16983  ,
                   27.16983  ,  27.16983  ],
                 [ 25.969818 ,  25.969818 ,  25.969818 , ...,  26.66983  ,
                   26.469818 ,  26.769836 ],
                 [ 25.869843 ,  25.769836 ,  25.769836 , ...,  26.869843 ,
                   26.469818 ,  26.469818 ]]],


               [[[-12.7500305, -12.7500305, -12.7500305, ..., -12.2500305,
                  -12.2500305, -12.2500305],
                 [-12.850006 , -12.850006 , -12.850006 , ..., -12.350006 ,
                  -12.350006 , -12.350006 ],
                 [-12.950012 , -12.950012 , -12.950012 , ..., -12.450012 ,
                  -12.450012 , -12.450012 ],
                 ...,
                 [-11.7500305, -11.7500305, -11.7500305, ..., -11.650024 ,
                  -11.7500305, -11.850006 ],
                 [-11.7500305, -11.650024 , -11.650024 , ..., -11.350006 ,
                  -11.450012 , -11.650024 ],
                 [-11.7500305, -11.650024 , -11.550018 , ..., -11.150024 ,
                  -11.2500305, -11.350006 ]],

                [[-15.2499695, -15.2499695, -15.2499695, ..., -14.2499695,
                  -14.2499695, -14.2499695],
                 [-15.449982 , -15.449982 , -15.449982 , ..., -14.349976 ,
                  -14.349976 , -14.349976 ],
                 [-15.549957 , -15.549957 , -15.549957 , ..., -14.349976 ,
                  -14.349976 , -14.349976 ],
                 ...,
                 [-12.049957 , -12.149963 , -12.149963 , ..., -10.949982 ,
                  -10.949982 , -11.049957 ],
                 [-11.7499695, -11.849976 , -11.949982 , ..., -10.849976 ,
                  -10.949982 , -10.949982 ],
                 [-11.549957 , -11.549957 , -11.649963 , ..., -10.7499695,
                  -10.849976 , -10.849976 ]],

                [[-21.649994 , -21.649994 , -21.649994 , ..., -21.149994 ,
                  -21.149994 , -21.149994 ],
                 [-21.84999  , -21.84999  , -21.75     , ..., -21.149994 ,
                  -21.149994 , -21.25     ],
                 [-21.949997 , -21.949997 , -21.949997 , ..., -21.25     ,
                  -21.25     , -21.25     ],
                 ...,
                 [-21.449997 , -21.549988 , -21.649994 , ..., -17.149994 ,
                  -17.049988 , -16.949982 ],
                 [-21.25     , -21.34999  , -21.449997 , ..., -17.149994 ,
                  -16.949982 , -16.850006 ],
                 [-21.049988 , -21.149994 , -21.25     , ..., -17.049988 ,
                  -16.949982 , -16.75     ]],

                ...,

                [[ 20.149994 ,  19.75     ,  19.149994 , ...,  12.149994 ,
                   12.149994 ,  12.149994 ],
                 [ 19.25     ,  18.75     ,  18.350006 , ...,  12.25     ,
                   12.25     ,  12.350006 ],
                 [ 19.25     ,  19.050018 ,  18.75     , ...,  12.350006 ,
                   12.350006 ,  12.25     ],
                 ...,
                 [ 21.950012 ,  21.950012 ,  21.950012 , ...,  23.050018 ,
                   23.149994 ,  23.050018 ],
                 [ 21.850006 ,  21.850006 ,  22.050018 , ...,  22.649994 ,
                   22.75     ,  22.75     ],
                 [ 21.850006 ,  21.75     ,  22.25     , ...,  22.75     ,
                   22.550018 ,  22.649994 ]],

                [[ 21.649994 ,  21.149994 ,  20.549988 , ...,  12.449982 ,
                   12.149994 ,  12.2499695],
                 [ 20.649994 ,  20.149994 ,  19.74997  , ...,  13.049988 ,
                   12.7499695,  12.2499695],
                 [ 20.649994 ,  20.449982 ,  20.149994 , ...,  12.849976 ,
                   12.349976 ,  12.2499695],
                 ...,
                 [ 23.949982 ,  23.949982 ,  23.949982 , ...,  25.149994 ,
                   25.349976 ,  25.149994 ],
                 [ 23.74997  ,  23.849976 ,  23.949982 , ...,  24.849976 ,
                   24.949982 ,  24.949982 ],
                 [ 23.74997  ,  23.549988 ,  23.74997  , ...,  24.849976 ,
                   24.74997  ,  24.849976 ]],

                [[ 23.056976 ,  22.556976 ,  21.957    , ...,  13.256989 ,
                   13.556976 ,  13.756989 ],
                 [ 22.056976 ,  21.556976 ,  21.156982 , ...,  13.256989 ,
                   13.156982 ,  13.056976 ],
                 [ 22.056976 ,  21.856995 ,  21.556976 , ...,  12.957001 ,
                   12.756989 ,  12.556976 ],
                 ...,
                 [ 26.056976 ,  26.056976 ,  26.056976 , ...,  27.356995 ,
                   27.556976 ,  27.356995 ],
                 [ 25.957    ,  25.957    ,  26.056976 , ...,  27.056976 ,
                   27.156982 ,  27.156982 ],
                 [ 25.856995 ,  25.656982 ,  25.656982 , ...,  26.957    ,
                   26.856995 ,  27.056976 ]]],


               ...,


               [[[-12.150024 , -12.2500305, -12.2500305, ..., -16.150024 ,
                  -16.25003  , -16.25003  ],
                 [-12.2500305, -12.2500305, -12.2500305, ..., -16.25003  ,
                  -16.25003  , -16.25003  ],
                 [-12.2500305, -12.2500305, -12.2500305, ..., -16.25003  ,
                  -16.25003  , -16.350006 ],
                 ...,
                 [-10.050018 , -10.2500305, -10.550018 , ...,  -9.7500305,
                   -9.7500305,  -9.7500305],
                 [-10.050018 , -10.350006 , -10.550018 , ...,  -9.950012 ,
                   -9.850006 ,  -9.950012 ],
                 [-10.150024 , -10.350006 , -10.550018 , ..., -10.050018 ,
                  -10.050018 , -10.050018 ]],

                [[-14.149994 , -14.149994 , -14.25     , ..., -18.649994 ,
                  -18.649994 , -18.649994 ],
                 [-14.25     , -14.350006 , -14.350006 , ..., -18.649994 ,
                  -18.649994 , -18.75     ],
                 [-14.449982 , -14.449982 , -14.549988 , ..., -18.649994 ,
                  -18.75     , -18.75     ],
                 ...,
                 [-15.449982 , -15.449982 , -15.350006 , ..., -11.850006 ,
                  -12.149994 , -12.350006 ],
                 [-15.350006 , -15.25     , -15.25     , ..., -11.75     ,
                  -11.949982 , -12.25     ],
                 [-15.149994 , -15.149994 , -15.049988 , ..., -11.549988 ,
                  -11.850006 , -12.149994 ]],

                [[-19.950012 , -19.950012 , -19.950012 , ..., -24.950012 ,
                  -24.950012 , -24.950012 ],
                 [-20.050018 , -20.050018 , -20.050018 , ..., -25.050018 ,
                  -25.050018 , -25.050018 ],
                 [-20.150024 , -20.250015 , -20.250015 , ..., -25.050018 ,
                  -25.150024 , -25.150024 ],
                 ...,
                 [-23.250015 , -23.150024 , -22.950012 , ..., -20.650024 ,
                  -20.850021 , -21.050018 ],
                 [-22.950012 , -22.850021 , -22.750015 , ..., -20.250015 ,
                  -20.450012 , -20.650024 ],
                 [-22.750015 , -22.650024 , -22.550018 , ..., -19.850021 ,
                  -20.150024 , -20.350021 ]],

                ...,

                [[ 19.25     ,  18.149994 ,  18.149994 , ...,  16.550018 ,
                   16.25     ,  16.050018 ],
                 [ 18.350006 ,  17.950012 ,  18.25     , ...,  16.450012 ,
                   16.149994 ,  15.950012 ],
                 [ 18.75     ,  18.25     ,  18.149994 , ...,  16.450012 ,
                   16.149994 ,  15.850006 ],
                 ...,
                 [ 22.550018 ,  22.350006 ,  22.149994 , ...,  23.050018 ,
                   22.450012 ,  22.350006 ],
                 [ 22.450012 ,  22.149994 ,  22.149994 , ...,  22.649994 ,
                   22.149994 ,  22.149994 ],
                 [ 22.450012 ,  22.649994 ,  22.75     , ...,  22.25     ,
                   22.050018 ,  22.050018 ]],

                [[ 20.649994 ,  19.550018 ,  19.550018 , ...,  16.950012 ,
                   16.75     ,  16.550018 ],
                 [ 19.850006 ,  19.350006 ,  19.75     , ...,  17.050018 ,
                   16.75     ,  16.450012 ],
                 [ 20.149994 ,  19.649994 ,  19.550018 , ...,  16.950012 ,
                   16.75     ,  16.350006 ],
                 ...,
                 [ 24.450012 ,  24.25     ,  24.149994 , ...,  24.450012 ,
                   24.550018 ,  24.350006 ],
                 [ 24.25     ,  24.050018 ,  24.050018 , ...,  24.050018 ,
                   24.25     ,  24.350006 ],
                 [ 23.850006 ,  23.850006 ,  24.050018 , ...,  23.950012 ,
                   24.149994 ,  24.149994 ]],

                [[ 22.050018 ,  20.950012 ,  20.950012 , ...,  14.75     ,
                   14.649994 ,  14.450012 ],
                 [ 21.25     ,  20.75     ,  21.149994 , ...,  14.75     ,
                   14.649994 ,  14.550018 ],
                 [ 21.550018 ,  21.050018 ,  20.950012 , ...,  14.550018 ,
                   14.550018 ,  14.450012 ],
                 ...,
                 [ 26.450012 ,  26.450012 ,  26.25     , ...,  26.350006 ,
                   26.75     ,  26.550018 ],
                 [ 26.25     ,  26.149994 ,  26.050018 , ...,  26.050018 ,
                   26.350006 ,  26.550018 ],
                 [ 25.850006 ,  25.649994 ,  25.850006 , ...,  26.050018 ,
                   26.350006 ,  26.25     ]]],


               [[[-13.949982 , -13.949982 , -14.049988 , ..., -17.049988 ,
                  -16.949982 , -16.949982 ],
                 [-14.049988 , -14.049988 , -14.149994 , ..., -17.149994 ,
                  -17.049988 , -17.049988 ],
                 [-14.149994 , -14.149994 , -14.149994 , ..., -17.25     ,
                  -17.25     , -17.149994 ],
                 ...,
                 [ -8.549988 ,  -8.649994 ,  -8.75     , ..., -14.149994 ,
                  -14.149994 , -14.149994 ],
                 [ -8.449982 ,  -8.549988 ,  -8.649994 , ..., -14.25     ,
                  -14.25     , -14.25     ],
                 [ -8.449982 ,  -8.549988 ,  -8.649994 , ..., -14.350006 ,
                  -14.350006 , -14.350006 ]],

                [[-15.75     , -15.75     , -15.75     , ..., -19.149994 ,
                  -19.25     , -19.34999  ],
                 [-15.850006 , -15.850006 , -15.850006 , ..., -19.149994 ,
                  -19.149994 , -19.25     ],
                 [-15.850006 , -15.949982 , -15.949982 , ..., -19.049988 ,
                  -19.149994 , -19.25     ],
                 ...,
                 [-12.449982 , -12.449982 , -12.549988 , ..., -14.149994 ,
                  -14.049988 , -13.75     ],
                 [-12.350006 , -12.350006 , -12.350006 , ..., -14.049988 ,
                  -13.850006 , -13.549988 ],
                 [-12.149994 , -12.25     , -12.25     , ..., -13.850006 ,
                  -13.649994 , -13.449982 ]],

                [[-21.250015 , -21.250015 , -21.250015 , ..., -25.150024 ,
                  -25.250015 , -25.250015 ],
                 [-21.350021 , -21.350021 , -21.350021 , ..., -25.050018 ,
                  -25.050018 , -25.150024 ],
                 [-21.350021 , -21.450012 , -21.450012 , ..., -24.950012 ,
                  -24.950012 , -25.050018 ],
                 ...,
                 [-22.250015 , -22.150024 , -22.150024 , ..., -20.750015 ,
                  -20.750015 , -20.650024 ],
                 [-21.950012 , -21.950012 , -21.950012 , ..., -20.250015 ,
                  -20.250015 , -20.150024 ],
                 [-21.750015 , -21.650024 , -21.650024 , ..., -19.850021 ,
                  -19.750015 , -19.750015 ]],

                ...,

                [[ 17.756989 ,  16.556976 ,  16.556976 , ...,  17.457    ,
                   17.256989 ,  16.856995 ],
                 [ 16.856995 ,  16.656982 ,  17.056976 , ...,  18.056976 ,
                   17.556976 ,  17.056976 ],
                 [ 17.156982 ,  16.856995 ,  17.056976 , ...,  17.856995 ,
                   17.556976 ,  17.156982 ],
                 ...,
                 [ 22.356995 ,  22.356995 ,  22.256989 , ...,  22.556976 ,
                   22.457    ,  22.457    ],
                 [ 22.256989 ,  22.156982 ,  22.056976 , ...,  21.957    ,
                   21.957    ,  22.156982 ],
                 [ 22.156982 ,  21.957    ,  22.056976 , ...,  21.756989 ,
                   21.756989 ,  21.957    ]],

                [[ 19.149994 ,  17.950012 ,  18.050018 , ...,  16.25     ,
                   16.75     ,  17.149994 ],
                 [ 18.25     ,  18.050018 ,  18.450012 , ...,  16.850006 ,
                   17.050018 ,  17.25     ],
                 [ 18.550018 ,  18.25     ,  18.550018 , ...,  17.149994 ,
                   17.050018 ,  17.050018 ],
                 ...,
                 [ 24.450012 ,  24.450012 ,  24.350006 , ...,  24.649994 ,
                   24.649994 ,  24.550018 ],
                 [ 24.25     ,  24.149994 ,  24.149994 , ...,  23.950012 ,
                   24.050018 ,  24.350006 ],
                 [ 24.050018 ,  23.75     ,  23.850006 , ...,  23.649994 ,
                   23.950012 ,  24.050018 ]],

                [[ 20.550018 ,  19.350006 ,  19.450012 , ...,  14.050018 ,
                   14.25     ,  14.450012 ],
                 [ 19.649994 ,  19.450012 ,  19.850006 , ...,  14.149994 ,
                   14.25     ,  14.350006 ],
                 [ 19.950012 ,  19.649994 ,  19.950012 , ...,  14.149994 ,
                   14.350006 ,  14.350006 ],
                 ...,
                 [ 26.550018 ,  26.550018 ,  26.450012 , ...,  26.75     ,
                   26.75     ,  26.75     ],
                 [ 26.350006 ,  26.350006 ,  26.25     , ...,  26.149994 ,
                   26.25     ,  26.550018 ],
                 [ 26.149994 ,  25.850006 ,  25.950012 , ...,  25.75     ,
                   26.149994 ,  26.25     ]]],


               [[[-15.350006 , -15.350006 , -15.449982 , ..., -16.649994 ,
                  -16.649994 , -16.549988 ],
                 [-15.350006 , -15.449982 , -15.449982 , ..., -16.75     ,
                  -16.649994 , -16.649994 ],
                 [-15.449982 , -15.449982 , -15.449982 , ..., -16.75     ,
                  -16.75     , -16.649994 ],
                 ...,
                 [-10.75     , -10.850006 , -10.949982 , ..., -14.049988 ,
                  -13.949982 , -13.949982 ],
                 [-10.649994 , -10.75     , -10.850006 , ..., -13.949982 ,
                  -13.949982 , -13.949982 ],
                 [-10.649994 , -10.75     , -10.850006 , ..., -13.949982 ,
                  -13.949982 , -13.949982 ]],

                [[-17.049988 , -17.049988 , -17.149994 , ..., -19.649994 ,
                  -19.649994 , -19.649994 ],
                 [-17.25     , -17.25     , -17.25     , ..., -19.75     ,
                  -19.75     , -19.75     ],
                 [-17.34999  , -17.449997 , -17.449997 , ..., -19.84999  ,
                  -19.84999  , -19.75     ],
                 ...,
                 [-13.350006 , -13.25     , -13.25     , ..., -14.649994 ,
                  -14.449982 , -14.25     ],
                 [-13.25     , -13.25     , -13.25     , ..., -14.649994 ,
                  -14.449982 , -14.25     ],
                 [-13.149994 , -13.149994 , -13.149994 , ..., -14.549988 ,
                  -14.350006 , -14.25     ]],

                [[-22.450012 , -22.450012 , -22.450012 , ..., -25.050018 ,
                  -25.050018 , -25.150024 ],
                 [-22.550018 , -22.550018 , -22.550018 , ..., -25.050018 ,
                  -25.050018 , -25.150024 ],
                 [-22.750015 , -22.750015 , -22.750015 , ..., -25.050018 ,
                  -25.050018 , -25.150024 ],
                 ...,
                 [-22.750015 , -22.750015 , -22.750015 , ..., -19.850021 ,
                  -19.850021 , -19.850021 ],
                 [-22.450012 , -22.550018 , -22.550018 , ..., -19.650024 ,
                  -19.550018 , -19.450012 ],
                 [-22.250015 , -22.250015 , -22.350021 , ..., -19.350021 ,
                  -19.250015 , -19.150024 ]],

                ...,

                [[ 17.356995 ,  15.656982 ,  15.856995 , ...,  16.556976 ,
                   17.056976 ,  17.556976 ],
                 [ 16.756989 ,  16.156982 ,  16.256989 , ...,  17.656982 ,
                   17.957    ,  18.156982 ],
                 [ 16.056976 ,  15.756989 ,  15.957001 , ...,  17.957    ,
                   17.957    ,  17.856995 ],
                 ...,
                 [ 22.256989 ,  22.256989 ,  22.256989 , ...,  22.556976 ,
                   22.556976 ,  22.356995 ],
                 [ 22.156982 ,  22.156982 ,  22.156982 , ...,  22.056976 ,
                   22.156982 ,  22.256989 ],
                 [ 22.156982 ,  21.957    ,  21.957    , ...,  21.656982 ,
                   21.856995 ,  21.957    ]],

                [[ 18.75     ,  17.050018 ,  17.350006 , ...,  15.25     ,
                   15.450012 ,  15.75     ],
                 [ 18.25     ,  17.550018 ,  17.649994 , ...,  16.149994 ,
                   16.350006 ,  16.75     ],
                 [ 17.550018 ,  17.25     ,  17.350006 , ...,  16.75     ,
                   16.950012 ,  17.350006 ],
                 ...,
                 [ 24.350006 ,  24.450012 ,  24.350006 , ...,  24.75     ,
                   24.649994 ,  24.550018 ],
                 [ 24.25     ,  24.25     ,  24.149994 , ...,  24.25     ,
                   24.350006 ,  24.450012 ],
                 [ 24.050018 ,  23.950012 ,  23.850006 , ...,  23.850006 ,
                   24.050018 ,  24.149994 ]],

                [[ 20.149994 ,  18.450012 ,  18.75     , ...,  13.649994 ,
                   13.75     ,  13.850006 ],
                 [ 19.649994 ,  18.950012 ,  19.050018 , ...,  13.850006 ,
                   13.75     ,  13.850006 ],
                 [ 18.950012 ,  18.649994 ,  18.75     , ...,  13.950012 ,
                   14.149994 ,  14.350006 ],
                 ...,
                 [ 26.450012 ,  26.550018 ,  26.550018 , ...,  26.950012 ,
                   26.850006 ,  26.649994 ],
                 [ 26.350006 ,  26.350006 ,  26.25     , ...,  26.350006 ,
                   26.550018 ,  26.550018 ],
                 [ 26.25     ,  26.149994 ,  26.050018 , ...,  26.050018 ,
                   26.149994 ,  26.25     ]]]], dtype=float32)
        Coordinates:
          * time1      (time1) datetime64[ns] 2017-09-05T12:00:00 ... 2017-09-06T12:00:00
            reftime    datetime64[ns] 2017-09-05T12:00:00
          * latitude   (latitude) float32 50.0 49.5 49.0 48.5 ... 11.5 11.0 10.5 10.0
          * longitude  (longitude) float32 250.0 250.5 251.0 251.5 ... 314.0 314.5 315.0
            crs        object Projection: latitude_longitude
          * isobaric3  (isobaric3) float64 100.0 200.0 300.0 ... 9.5e+04 9.75e+04 1e+05
        Attributes:
            long_name:                      Temperature @ Isobaric surface
            units:                          degree_Celsius
            Grib_Variable_Id:               VAR_0-0-0_L100
            Grib2_Parameter:                [0 0 0]
            Grib2_Parameter_Discipline:     Meteorological products
            Grib2_Parameter_Category:       Temperature
            Grib2_Parameter_Name:           Temperature
            Grib2_Level_Type:               100
            Grib2_Level_Desc:               Isobaric surface
            Grib2_Generating_Process_Type:  Forecast
            grid_mapping:                   LatLon_361X720-0p25S-180p00E</pre>
        <br />
        <br />

Coordinates
-----------

You may have noticed how we directly accessed the vertical coordinates above using their
names. However, in general, if we are working with a particular DataArray, we don't have to
worry about that since MetPy is able to parse the coordinates and so obtain a particular
coordinate type directly. There are two ways to do this:

1. Use the ``data_var.metpy.coordinates`` method
2. Use the ``data_var.metpy.x``, ``data_var.metpy.y``, ``data_var.metpy.longitude``,
   ``data_var.metpy.latitude``, ``data_var.metpy.vertical``,  ``data_var.metpy.time``
   properties

The valid coordinate types are:

- x
- y
- longitude
- latitude
- vertical
- time

(Both approaches are shown below)

The ``x``, ``y``, ``vertical``, and ``time`` coordinates cannot be multidimensional,
however, the ``longitude`` and ``latitude`` coordinates can (which is often the case for
gridded weather data in its native projection). Note that for gridded data on an
equirectangular projection, such as the GFS data in this example, ``x`` and ``longitude``
will be identical (as will ``y`` and ``latitude``).


.. code-block:: default


    # Get multiple coordinates (for example, in just the x and y direction)
    x, y = data['temperature'].metpy.coordinates('x', 'y')

    # If we want to get just a single coordinate from the coordinates method, we have to use
    # tuple unpacking because the coordinates method returns a generator
    vertical, = data['temperature'].metpy.coordinates('vertical')

    # Or, we can just get a coordinate from the property
    time = data['temperature'].metpy.time

    # To verify, we can inspect all their names
    print([coord.name for coord in (x, y, vertical, time)])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ['longitude', 'latitude', 'isobaric3', 'time1']




Indexing and Selecting Data
---------------------------

MetPy provides wrappers for the usual xarray indexing and selection routines that can handle
quantities with units. For DataArrays, MetPy also allows using the coordinate axis types
mentioned above as aliases for the coordinates. And so, if we wanted 850 hPa heights,
we would take:


.. code-block:: default


    print(data['height'].metpy.sel(vertical=850 * units.hPa))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray 'height' (time1: 9, latitude: 81, longitude: 131)>
    array([[[1593.8025, 1594.1064, ..., 1453.2264, 1458.3625],
            [1594.7784, 1595.0825, ..., 1463.3065, 1468.4905],
            ...,
            [1511.4985, 1511.8025, ..., 1537.6584, 1536.9385],
            [1511.2745, 1511.9305, ..., 1537.9146, 1537.0825]],

           [[1590.0658, 1590.8018, ..., 1463.2977, 1465.3617],
            [1591.5537, 1591.9377, ..., 1472.6577, 1475.2338],
            ...,
            [1522.8977, 1523.2977, ..., 1536.4337, 1535.5857],
            [1523.0417, 1523.4738, ..., 1536.7058, 1535.6978]],

           ...,

           [[1546.7413, 1547.8773, ..., 1553.7174, 1555.9254],
            [1547.8453, 1549.2374, ..., 1563.6373, 1565.6533],
            ...,
            [1514.6774, 1514.1814, ..., 1524.7733, 1524.3093],
            [1515.4934, 1515.0294, ..., 1524.8214, 1524.3414]],

           [[1542.1625, 1542.6906, ..., 1561.7946, 1564.2264],
            [1542.2426, 1543.2345, ..., 1571.6665, 1574.0825],
            ...,
            [1507.6505, 1507.2025, ..., 1538.3385, 1537.8905],
            [1508.5625, 1508.0505, ..., 1538.8185, 1538.6105]]], dtype=float32)
    Coordinates:
      * time1      (time1) datetime64[ns] 2017-09-05T12:00:00 ... 2017-09-06T12:00:00
        reftime    datetime64[ns] 2017-09-05T12:00:00
      * latitude   (latitude) float32 50.0 49.5 49.0 48.5 ... 11.5 11.0 10.5 10.0
      * longitude  (longitude) float32 250.0 250.5 251.0 251.5 ... 314.0 314.5 315.0
        crs        object Projection: latitude_longitude
        isobaric3  float64 8.5e+04
    Attributes:
        long_name:                      Geopotential height @ Isobaric surface
        units:                          gpm
        Grib_Variable_Id:               VAR_0-3-5_L100
        Grib2_Parameter:                [0 3 5]
        Grib2_Parameter_Discipline:     Meteorological products
        Grib2_Parameter_Category:       Mass
        Grib2_Parameter_Name:           Geopotential height
        Grib2_Level_Type:               100
        Grib2_Level_Desc:               Isobaric surface
        Grib2_Generating_Process_Type:  Forecast
        grid_mapping:                   LatLon_361X720-0p25S-180p00E




For full details on xarray indexing/selection, see
`xarray's documentation <http://xarray.pydata.org/en/stable/indexing.html>`_.

Projections
-----------

Getting the cartopy coordinate reference system (CRS) of the projection of a DataArray is as
straightforward as using the ``data_var.metpy.cartopy_crs`` property:


.. code-block:: default


    data_crs = data['temperature'].metpy.cartopy_crs
    print(data_crs)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <cartopy.crs.PlateCarree object at 0x7f1c3aaf2ba0>




The cartopy ``Globe`` can similarly be accessed via the ``data_var.metpy.cartopy_globe``
property:


.. code-block:: default


    data_globe = data['temperature'].metpy.cartopy_globe
    print(data_globe)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <cartopy._crs.Globe object at 0x7f1c55d75e80>




Calculations
------------

Most of the calculations in `metpy.calc` will accept DataArrays by converting them
into their corresponding unit arrays. While this may often work without any issues, we must
keep in mind that because the calculations are working with unit arrays and not DataArrays:

- The calculations will return unit arrays rather than DataArrays
- Broadcasting must be taken care of outside of the calculation, as it would only recognize
  dimensions by order, not name

As an example, we calculate geostropic wind at 500 hPa below:


.. code-block:: default


    lat, lon = xr.broadcast(y, x)
    f = mpcalc.coriolis_parameter(lat)
    dx, dy = mpcalc.lat_lon_grid_deltas(lon, lat, initstring=data_crs.proj4_init)
    heights = data['height'].metpy.loc[{'time': time[0], 'vertical': 500. * units.hPa}]
    u_geo, v_geo = mpcalc.geostrophic_wind(heights, f, dx, dy)
    print(u_geo)
    print(v_geo)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[2.2725555398031156 6.251403116857854 3.2825541563237786 ...  33.11408008114585 32.73451716892398 32.5765366055535] [3.816296728549826 4.388776144480824 4.325234764565967 ...  31.008031569492147 30.753751181686432 30.53090851162976] [5.127334159205037 4.8391046648176665 5.800603470028939 ...  29.193827699079304 29.03383493002396 28.58473535972384] ... [-1.9117831398732483 -1.1464325905754669 -1.91181664555917 ...  -7.0079228001080995 -7.392149528166841 -6.88190745221371] [-2.8016460018049023 -2.6697320073045367 -2.4025371858986984 ...  -6.404532768301047 -7.204303662756457 -6.93719274537382] [-7.13845125502525 -8.405095361594876 -3.6393431096920725 ...  -5.606968107542709 -7.557393778305965 -8.398398522461456]] meter / second
    [[-14.791524808043887 -14.39816816884509 -16.89520567938152 ...  5.582914366984641 6.513698998038233 7.396061307243545] [-8.301012127894664 -13.770643557272367 -17.09080997637208 ...  5.273521060998235 6.103860705847083 7.179189291138215] [-11.98245151438716 -13.540158320367329 -14.854696392129718 ...  4.919261875064201 5.747462478394741 6.7213265044217945] ... [4.25739861885645 3.4827536038902918 2.966323593912038 ...  3.224538598899942 3.2245385989023876 1.9334635739628656] [6.609707782452212 3.1007692883802775 2.0210959055875346 ...  2.4259734241357735 3.63896013620366 3.3723334776431315] [4.799363905563508 4.2371674868632 2.5436801152315818 ...  1.5555250602976798 2.9679142225845174 3.812933379494143]] meter / second




Also, a limited number of calculations directly support xarray DataArrays or Datasets (they
can accept *and* return xarray objects). Right now, this includes

- Derivative functions
    - ``first_derivative``
    - ``second_derivative``
    - ``gradient``
    - ``laplacian``
- Cross-section functions
    - ``cross_section_components``
    - ``normal_component``
    - ``tangential_component``
    - ``absolute_momentum``
- Smoothing functions
    - ``smooth_gaussian``
    - ``smooth_n_point``
    - ``smooth_window``
    - ``smooth_rectangular``
    - ``smooth_circular``

More details can be found by looking at the documentation for the specific function of
interest.

There is also the special case of the helper function, ``grid_deltas_from_dataarray``, which
takes a ``DataArray`` input, but returns unit arrays for use in other calculations. We could
rewrite the above geostrophic wind example using this helper function as follows:


.. code-block:: default


    heights = data['height'].metpy.loc[{'time': time[0], 'vertical': 500. * units.hPa}]
    lat, lon = xr.broadcast(y, x)
    f = mpcalc.coriolis_parameter(lat)
    dx, dy = mpcalc.grid_deltas_from_dataarray(heights)
    u_geo, v_geo = mpcalc.geostrophic_wind(heights, f, dx, dy)
    print(u_geo)
    print(v_geo)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[2.2725555398031156 6.251403116857854 3.2825541563237786 ...  33.11408008114585 32.73451716892398 32.5765366055535] [3.816296728549826 4.388776144480824 4.325234764565967 ...  31.008031569492147 30.753751181686432 30.53090851162976] [5.127334159205037 4.8391046648176665 5.800603470028939 ...  29.193827699079304 29.03383493002396 28.58473535972384] ... [-1.9117831398732483 -1.1464325905754669 -1.91181664555917 ...  -7.0079228001080995 -7.392149528166841 -6.88190745221371] [-2.8016460018049023 -2.6697320073045367 -2.4025371858986984 ...  -6.404532768301047 -7.204303662756457 -6.93719274537382] [-7.13845125502525 -8.405095361594876 -3.6393431096920725 ...  -5.606968107542709 -7.557393778305965 -8.398398522461456]] meter / second
    [[-14.791524808043887 -14.39816816884509 -16.89520567938152 ...  5.582914366984641 6.513698998038233 7.396061307243545] [-8.301012127894664 -13.770643557272367 -17.09080997637208 ...  5.273521060998235 6.103860705847083 7.179189291138215] [-11.98245151438716 -13.540158320367329 -14.854696392129718 ...  4.919261875064201 5.747462478394741 6.7213265044217945] ... [4.25739861885645 3.4827536038902918 2.966323593912038 ...  3.224538598899942 3.2245385989023876 1.9334635739628656] [6.609707782452212 3.1007692883802775 2.0210959055875346 ...  2.4259734241357735 3.63896013620366 3.3723334776431315] [4.799363905563508 4.2371674868632 2.5436801152315818 ...  1.5555250602976798 2.9679142225845174 3.812933379494143]] meter / second




Plotting
--------

Like most meteorological data, we want to be able to plot these data. DataArrays can be used
like normal numpy arrays in plotting code, which is the recommended process at the current
point in time, or we can use some of xarray's plotting functionality for quick inspection of
the data.

(More detail beyond the following can be found at `xarray's plotting reference
<http://xarray.pydata.org/en/stable/plotting.html>`_.)


.. code-block:: default


    # A very simple example example of a plot of 500 hPa heights
    data['height'].metpy.loc[{'time': time[0], 'vertical': 500. * units.hPa}].plot()
    plt.show()




.. image:: /tutorials/images/sphx_glr_xarray_tutorial_001.png
    :class: sphx-glr-single-img






.. code-block:: default


    # Let's add a projection and coastlines to it
    ax = plt.axes(projection=ccrs.LambertConformal())
    data['height'].metpy.loc[{'time': time[0],
                              'vertical': 500. * units.hPa}].plot(ax=ax, transform=data_crs)
    ax.coastlines()
    plt.show()




.. image:: /tutorials/images/sphx_glr_xarray_tutorial_002.png
    :class: sphx-glr-single-img






.. code-block:: default


    # Or, let's make a full 500 hPa map with heights, temperature, winds, and humidity

    # Select the data for this time and level
    data_level = data.metpy.loc[{time.name: time[0], vertical.name: 500. * units.hPa}]

    # Create the matplotlib figure and axis
    fig, ax = plt.subplots(1, 1, figsize=(12, 8), subplot_kw={'projection': data_crs})

    # Plot RH as filled contours
    rh = ax.contourf(x, y, data_level['relative_humidity'], levels=[70, 80, 90, 100],
                     colors=['#99ff00', '#00ff00', '#00cc00'])

    # Plot wind barbs, but not all of them
    wind_slice = slice(5, -5, 5)
    ax.barbs(x[wind_slice], y[wind_slice],
             data_level['u'].metpy.unit_array[wind_slice, wind_slice].to('knots'),
             data_level['v'].metpy.unit_array[wind_slice, wind_slice].to('knots'),
             length=6)

    # Plot heights and temperature as contours
    h_contour = ax.contour(x, y, data_level['height'], colors='k', levels=range(5400, 6000, 60))
    h_contour.clabel(fontsize=8, colors='k', inline=1, inline_spacing=8,
                     fmt='%i', rightside_up=True, use_clabeltext=True)
    t_contour = ax.contour(x, y, data_level['temperature'], colors='xkcd:deep blue',
                           levels=range(-26, 4, 2), alpha=0.8, linestyles='--')
    t_contour.clabel(fontsize=8, colors='xkcd:deep blue', inline=1, inline_spacing=8,
                     fmt='%i', rightside_up=True, use_clabeltext=True)

    # Add geographic features
    ax.add_feature(cfeature.LAND.with_scale('50m'), facecolor=cfeature.COLORS['land'])
    ax.add_feature(cfeature.OCEAN.with_scale('50m'), facecolor=cfeature.COLORS['water'])
    ax.add_feature(cfeature.STATES.with_scale('50m'), edgecolor='#c7c783', zorder=0)
    ax.add_feature(cfeature.LAKES.with_scale('50m'), facecolor=cfeature.COLORS['water'],
                   edgecolor='#c7c783', zorder=0)

    # Set a title and show the plot
    ax.set_title('500 hPa Heights (m), Temperature (\u00B0C), Humidity (%) at '
                 + time[0].dt.strftime('%Y-%m-%d %H:%MZ').item())
    plt.show()




.. image:: /tutorials/images/sphx_glr_xarray_tutorial_003.png
    :class: sphx-glr-single-img





What Could Go Wrong?
--------------------

Depending on your dataset and what you are trying to do, you might run into problems with
xarray and MetPy. Below are examples of some of the most common issues

- Multiple coordinate conflict
- An axis not being available
- An axis not being interpretable
- Arrays not broadcasting in calculations

**Coordinate Conflict**

Code:

::

    x = data['Temperature'].metpy.x

Error Message:

::

    /home/user/env/MetPy/metpy/xarray.py:305: UserWarning: More than
    one x coordinate present for variable "Temperature".

Fix:

Manually assign the coordinates using the ``assign_coordinates()`` method on your DataArray,
or by specifying the ``coordinates`` argument to the ``parse_cf()`` method on your Dataset,
to map the ``time``, ``vertical``, ``y``, ``latitude``, ``x``, and ``longitude`` axes (as
applicable to your data) to the corresponding coordinates.

::

    data['Temperature'].assign_coordinates({'time': 'time', 'vertical': 'isobaric',
                                            'y': 'y', 'x': 'x'})
    x = data['Temperature'].metpy.x

or

::

    temperature = data.metpy.parse_cf('Temperature',
                                      coordinates={'time': 'time', 'vertical': 'isobaric',
                                                   'y': 'y', 'x': 'x'})
    x = temperature.metpy.x

**Axis Unavailable**

Code:

::

    data['Temperature'].metpy.vertical

Error Message:

::

    AttributeError: vertical attribute is not available.

This means that your data variable does not have the coordinate that was requested, at
least as far as the parser can recognize. Verify that you are requesting a
coordinate that your data actually has, and if it still is not available,
you will need to manually specify the coordinates as discussed above.

**Axis Not Interpretable**

Code:

::

    x, y, ensemble = data['Temperature'].metpy.coordinates('x', 'y', 'ensemble')

Error Message:

::

    AttributeError: 'ensemble' is not an interpretable axis

This means that you are requesting a coordinate that MetPy is (currently) unable to parse.
While this means it cannot be recognized automatically, you can still obtain your desired
coordinate directly by accessing it by name. If you have a need for systematic
identification of a new coordinate type, we welcome pull requests for such new functionality
on GitHub!

**Broadcasting in Calculations**

Code:

::

    theta = mpcalc.potential_temperature(data['isobaric3'], data['temperature'])

Error Message:

::

    ValueError: operands could not be broadcast together with shapes (9,31,81,131) (31,)

This is a symptom of the incomplete integration of xarray with MetPy's calculations; the
calculations currently convert the DataArrays to unit arrays that do not recognize which
coordinates match with which. And so, we must do some manipulations.

Fix 1 (xarray broadcasting):

::

    pressure, temperature = xr.broadcast(data['isobaric3'], data['temperature'])
    theta = mpcalc.potential_temperature(pressure, temperature)

Fix 2 (unit array broadcasting):

::

    theta = mpcalc.potential_temperature(
        data['isobaric3'].metpy.unit_array[None, :, None, None],
        data['temperature'].metpy.unit_array
    )



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.373 seconds)


.. _sphx_glr_download_tutorials_xarray_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: xarray_tutorial.py <xarray_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: xarray_tutorial.ipynb <xarray_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
